#!/bin/bash

### NMBScript v1.0 ###
# Configurações iniciais. Não alterar.
# A serem atualizadas conforme novas versões do script forem distribuídas.
current_nmbscript_version="1.0"
current_nmbot_url="https://bit.ly/nmbot-1-3-linux-java"

# Verificações iniciais: se é a primeira vez que o script é executado e se a versão do
#   script é a mesma já instalada no sistema. Caso não seja, a informação é atualizada.
# O link de download do nmbot deve ser atualizado manualmente com o comando 'nm-atualizar'
#   conforme novas versões sejam lançadas. Consta em variável definida acima apenas para
#   configuração na primeira instalação do script.
# Os comandos pertinentes à primeira execução encontram-se no fim do script
#   de forma que as funções do script possam ser utilizadas nesse primeiro acesso.
if [[ -z "$NMBSCRIPT_VERSION" ]]; then
  nmbscript_firsttime="1"
  # variável definida aqui para que a versão apareça na primeira chamada do comando 'nms-info'
  NMBSCRIPT_VERSION="$current_nmbscript_version"
elif [[ ! "$NMBSCRIPT_VERSION" = "$current_nmbscript_version" ]]; then
  sudo sed -i "/NMBSCRIPT_VERSION/d" /etc/profile.d/nmbscript-variables.sh
  echo "export NMBSCRIPT_VERSION=\"${current_nmbscript_version}\"" | sudo tee -a /etc/profile.d/nmbscript-variables.sh > /dev/null
  . /etc/profile.d/nmbscript-variables.sh
fi

#######
#####
##### Comandos interativos para o NMBOT:
##### > nm-instalar
##### > nm-desinstalar
##### > nm-listar
##### > nm-configurar
##### > nm-agendar
##### > nm-backup
##### > nm-registros
##### > nm-atualizar
#####
#######

# Função interativa para instalar uma nova instância do robô
function nm-instalar() {
  # opcional: $1 = arquivo .zip do nmbot (para instalar outras distribuições ou pacotes do NMBOT
  # se omitido, instala a partir do arquivo ~/.nmbot.zip
  nmbotfile="${HOME}/$1"
  [[ ! -f "$nmbotfile" ]] && nmbotfile="${HOME}/.nmbot.zip"
  [[ ! -f "$nmbotfile" ]] && { echo -e "\nArquivo do NMBOT não encontrado.\nPara informar um novo link para download do NMBOT, use o comando nm-atualizar.\nNenhuma alteração foi feita.\n" >&2; return 1; }
  do-nmbot-list
  if [[ "$NM_COUNT" -ge "1" ]]
    then pergunta=$'\nVocê possui '"${NM_COUNT}"$' instância(s) do NMBOT instalada(s).\nDeseja instalar a instância de número '"$(( $NM_COUNT + 1 ))? (s/n) > "
    else pergunta=$'\nVocê não possui instâncias do NMBOT instaladas atualmente.\nDeseja continuar com a instalação? (s/n) > '
  fi
  read -p "$pergunta" -r
  do-nmbs-sncheck "$REPLY" || { echo -e "\nNenhuma alteração foi realizada.\n"; return 1; }

  pergunta=$'Digite o e-mail do usuário cujo robô será instalado: (você pode editá-lo mais tarde)\n> '
  read -p "$pergunta" -r tmp_user
  tmp_user=${tmp_user:="usuario@email.com"}

  do-nmbot-install "$tmp_user" "$nmbotfile"
  echo -e "\nInstalação completa. A nova instância do NMBOT foi instalada no diretório ${nmnewpath}.\n"
  unset nmbotfile nmnewpath pergunta
  return 0
}

# Função interativa para desinstalar uma ou mais instâncias do robô
function nm-desinstalar() {
  do-nmbot-list || { echo -e "\nVocê não possui instâncias do NMBOT instaladas.\nPara instalar, use o comando nm-instalar.\n" >&2; return 1; }

  echo -e "\nVocê possui $NM_COUNT instância(s) do NMBOT instalada(s).\nQual delas você deseja desinstalar?\n"

  select_options=()
  for d in "${!nmdir[@]}"; do
    select_options+=("${nmdir[d]} - usuário: ${nmuser[d]}")
  done
  unset d
  select_options+=("Remover TODAS as instâncias do NMBOT.")
  select_options+=("Cancelar.")

  tnmbs-select
  nmbs_current_index="$select_number"

  if [[ "$select_choice" = Cancelar* ]]; then echo -e "\nCancelado. Nenhuma alteração foi feita.\n"; return 1; fi

  #set the backup string to "1", which will tell the do-nmbot-backup command to save a backup from a given user
  bkstring="1"
  #in the following case, set bkstring to 2, which will tell the do-nmbot-backup command to save backups from all instances
  [[ "$select_choice" = Remover* ]] && { bkstring="2"; nmbs_current_index="-a"; }

  read -p "Você selecionou a opção ${REPLY}) $select_choice
Confirma? (s/n) > " -r
  do-nmbs-sncheck "$REPLY" || { echo -e "\nCancelado. Nenhuma alteração foi feita.\n"; return 1; }

  read -p "Deseja fazer backup dos arquivos de configuração e dos logs (registros de atividade)? (s/n) > " -r
  do-nmbs-sncheck "$REPLY" && do-nmbot-backup "$bkstring" "$nmbs_current_index" && warnbackup=1

  if [[ "$nmbs_current_index" = "-a" ]];
    then echo -en "\nRemovendo todas as instâncias do robô..."
    else echo -en "\nRemovendo instância ${nmdir[$nmbs_current_index]} do usuário ${nmuser[$nmbs_current_index]}..."
  fi
  do-nmbot-uninstall "$nmbs_current_index" && echo -e " concluído!\n" || echo -e " oops! Ocorreu um erro durante a desinstalação. Verifique as instâncias escolhidas para desinstalação.\n"

  [[ "$warnbackup" = "1" ]] && echo -e "Backup salvo em ${HOME}/backup-nmbot\n"
  unset warnbackup select_choice select_number
  return 0
}

# Função para listar as instâncias instaladas do NMBOT no terminal
function nm-listar() {
  do-nmbot-list || { echo -e "\nVocê não possui instâncias do NMBOT instaladas.\nPara instalar, use o comando nm-instalar.\n" >&2; return 1; }

  echo -e "\nVocê possui $NM_COUNT instância(s) do NMBOT instalada(s) no seu diretório raiz (${HOME}):"
  for l in "${!nmdir[@]}"; do
    echo "$(( l + 1 )). ${nmdir[l]} - usuário: ${nmuser[l]}"
  done
  echo ""
  unset l
}

function nm-configurar() {
  do-nmbot-list || { echo -e "\nVocê não possui instâncias do NMBOT instaladas.\nPara instalar, use o comando nm-instalar.\n" >&2; return 1; }
  tnmbs-sel-instance

  echo -e "\nQual arquivo de configuração você deseja editar?\nRobô instalado em ~/${nmdir[$nmbs_current_index]} - usuário ${nmuser[$nmbs_current_index]}\n"
  select_options=("Carteira SPOT (spot-wallet)" "Carteira SPOT fixa (spot-fixed)" "Carteira FUTUROS (futures-wallet)" "Carteira FUTUROS fixa (futures-fixed)" "Configurações de usuário (user)" "Cancelar")
  tnmbs-select

  case $select_number in
    0) nm_tmpfile="${nmpath[$nmbs_current_index]}/config/spot-wallet.properties" ;;
    1) nm_tmpfile="${nmpath[$nmbs_current_index]}/config/spot-fixed.properties" ;;
    2) nm_tmpfile="${nmpath[$nmbs_current_index]}/config/futures-wallet.properties" ;;
    3) nm_tmpfile="${nmpath[$nmbs_current_index]}/config/futures-fixed.properties" ;;
    4) nm_tmpfile="${nmpath[$nmbs_current_index]}/config/user.properties" ;;
    5) unset escolha; echo -e "\nCancelado. Nenhuma alteração foi feita.\n"; return 1 ;;
  esac

  [[ ! -f "$nm_tmpfile" ]] && { echo -e "\n${nm_tmpfile}\nArquivo correspondente não encontrado.\nVerifique manualmente o diretório ~/${nmdir[$nmbs_current_index]}/config/\n" >&2; unset nm_tmpfile; return 1; }

  echo -e "\nDeseja abrir o editor de texto ou revisar e preencher as informações na linha de comando?\n"
  select_options=("Editor de texto (útil se voce tiver experiência, e necessário para ativar algumas opções desativadas por padrão)" "Seguir com linha de comando (mais fácil, você será guiado(a) pelo conteúdo do arquivo)")
  tnmbs-select

  if [[ "$select_number" = "0" ]]; then
    echo -e "\nVocê acessará o arquivo escolhido com o editor de texto 'nano'.\nUse as setas do teclado e as teclas 'Page Up' e 'Page Down' para mover o cursor.\nEm alguns sistemas você também pode usar o mouse para rolar e para clicar.\n\nApós fazer suas alterações, use as teclas 'Ctrl + X' para sair, depois 'Y' para salvar, e 'Enter' para confirmar (não altere o nome do arquivo).\nPressione Enter para continuar..."
    read
    nano -m "$nm_tmpfile"
    echo ""
    unset escolha nm_tmpfile
    return 0
  fi

  echo -e "\nVocê acessará o arquivo escolhido uma linha de cada vez.\nFaça as alterações necessárias em cada uma delas e pressione Enter para ir para a próxima linha.\nCaso não queira alterar o conteúdo de alguma linha, apenas pressione Enter para seguir em frente.\nPara deixar uma entrada em branco, apague o seu conteúdo.\nPressione Enter para iniciar..."
  read

#  there are 3 requirements for the next section: a loop that reads the input file line-by-line, a break to prompt for
# a value for each entry, and the ability to pre-fill the value to give the user the option of not changing its value
#  the most straightforward approach would be to use a while-read loop. nonetheless, it seems to be incompatible with
# the other two requirements. if used in a standard way, a read -p (even with a -e option) command inside a while-read
# loop will just not prompt the user. that behaviour seems to be due to the fact that the while-loop is already reading
# from stdin. when we use strerr to prompt for a value instead, it does prompt the user as expected, but becomes
# incompatible with the -i (pre-filling) option. i also tried to feed the while-read loop via stderr (while read -u 2
# line....done 2< file...) and keeping the user prompt reading from stdin, but it is also incompatible with the -i
# option.
#   since there seemed to be no workaround this issue, i opted to build a for loop which reads the input file with
# sed -n "n"p instead. this solution is less sophisticated, but works nonetheless. it does run external programs
# and is less efficient resourcewise, but since the configuration files are not very large, it will do the job
# without any hiccups. the tr -d is necessary to remove return carriages and newline characters.

  total=$( grep -c "" "$nm_tmpfile" )
  let n=1
  for (( n=1; n<="$total"; n++ )); do
    # ler a prodima linha do arquivo de configuração
    line=$( sed -n ${n}p "$nm_tmpfile" | tr -d '\n\r' )
    # se for um comentário (iniciae com #)
    if [[ "$line" =~ ^[#] ]]; then
      # ajustar o cabeçalho da próxima entrada
      if [[ "$printlh" = "1" ]]; then
        lastheader="${lastheader}\n>${line//#}"
      else
        lastheader=">${line//#}"
        printlh=1
      fi
    # se for linha vazia, seguir para a próxima
    elif [[ -z "$line" ]]; then
      continue
    # do contrário, ajustar entrada/valor e solicitar edição
    else
      entry="${line% = *}"
      value="${line#* = }"
      [[ "$printlh" = "1" ]] && { echo -e "\n${lastheader}"; unset printlh; }
      read -e -p ">>> ${entry} = " -i "${value}" -r
      if [[ "$REPLY" = "$value" ]]; then
        continue
      else
        sed -i "s/${entry} = ${value}/${entry} = ${REPLY}/" "$nm_tmpfile" && echo -e ">>> Entrada atualizada.\n" || echo -e ">>> Oops. Ocorreu um erro e esta linha não pôde ser modificada.\n"
      fi
    fi
  done
  echo -e "\nFim da edição. O arquivo foi salvo.\n"
  unset nm_tmpfile lastheader printlh entry value line n
}

# Função para agendar e automatizar a execução do robô:
function nm-agendar() {
  do-nmbot-list || { echo -e "\nVocê não possui instâncias do NMBOT instaladas.\nPara instalar, use o comando nm-instalar.\n" >&2; return 1; }
  tnmbs-sel-instance

  # Pergunta ao usuário para qual carteira deseja agendar o rebalanceamento:
  if [[ "$NM_COUNT" -gt "1" ]]; then
    echo "Você escolheu a instância ${nmdir[$nmbs_current_index]}, do usuário ${nmuser[$nmbs_current_index]}."
  else
    echo -e "\nInstância instalada do NMBOT: ${nmdir[0]}, usuário ${nmuser[0]}."
  fi
  echo -e "Selecione a carteira cujo rebalanceamento você deseja agendar.\n"

  select_options=("Carteira SPOT" "Carteira FUTUROS" "CONSULTAR agendamentos" "CANCELAR agendamentos")
  tnmbs-select

  case $select_number in
    0) nmbot_run_file=spot-run.sh
       nmbot_pw_file=spot-pwsync.sh
       nmbot_sel_wallet=SPOT ;;
    1) nmbot_run_file=futures-run.sh
       nmbot_pw_file=futures-pwsync.sh
       nmbot_sel_wallet=FUTUROS ;;
    [2-3]) : ;;
    *) echo -e "\nAgendamento cancelado. Nenhum alteração foi feita.\n"
       return 1 ;;
  esac

  # Temporário: o comando nm-agendar deve passar por desmembramento das suas funções, ativando função específica para executar
  # as ações propostas de agendamento, consulta e cancelamento.
  # Enquanto isso não ocorre, será feito um "desvio" para consulta e cancelamento, que evita a execução da função na parte
  # específica de realizar agendamentos, mas polui um pouco o script com código desnecessário/repetido. Será melhorado.
  # Além disso, o prompt para consulta e cancelamento aparece depois do prompt para seleção de instância, caso haja mais
  # de uma instalada. A ser corrigido.
  if [[ "$select_number" = "2" ]]; then
    echo -e "\nVocê verá os agendamentos ativos relacionados ao NMBOT em uma tela separada.\nPara sair desta tela, pressione a tecle 'Q'."
    read -p "Aperte ENTER para continuar..." -r

    touch crontab.tmp
    crontabfile="/var/spool/cron/crontabs/$USER"
    crontabfileexists="0"
    sudo test -f "$crontabfile" && crontabfileexists="1"
    if [[ "$crontabfileexists" -eq "1" ]]; then
      sudo cat "$crontabfile" | grep NMBOT > crontab.tmp
      sed -i 's/\*/-/g' crontab.tmp
      touch agendamentos
      echo -e "Agendamentos do NMBOT presentes no sistema:\n" > agendamentos
      while read -r line; do
        line_array=($line)
        line_command="${line_array[@]:6}"
        line_command="${line_command//$\{}"
        line_command="${line_command//_HOME\}}"
        echo "Comando: $line_command" >> agendamentos
        echo -e "Horário: ${line_array[1]}:${line_array[0]}\n" >> agendamentos
      done < crontab.tmp
      less agendamentos
      echo -e "\nConcuído. Se desejar consultar os agendamentos diretamente no sistema, use o comando 'crontab -l'.\n"
      rm crontab.tmp agendamentos 2> /dev/null
      unset line line_array line_command crontabfile crontabfileexists
      return 0
    else
      echo -e "\nNão há agendamentos ativos no sistema.\n"
      return 1
    fi
  elif [[ "$select_number" = "3" ]]; then
    echo -e "\nEste comando irá excluir todos os agendamentos relacionados ao NMBOT do seu sistema.\nVocê pode facilmente reagendá-los com o comando 'nm-agendar'."
    read -p "Deseja prosseguir? (s/n) > " -r
    do-nmbs-sncheck "$REPLY" || { echo -e "\nCancelado. Nenhuma alteração foi feita.\n"; return 1; }

    touch crontab.tmp
    crontabfile="/var/spool/cron/crontabs/$USER"
    crontabfileexists="0"
    sudo test -f "$crontabfile" && crontabfileexists="1"
    if [[ "$crontabfileexists" -eq "1" ]]; then
      sudo sed /NMBOT/d "$crontabfile" > crontab.tmp
      crontab crontab.tmp 2> /dev/null || { echo -e "\nHouve um erro durante a instalação dos agendamentos no sistema.\nTente novamente com o comando 'nm-agendar' ou agende manualmente através do comando 'crontab -e'.\n"; rm crontab.tmp 2> /dev/null; return 1; }
      sudo service cron start
      rm crontab.tmp 2> /dev/null
      return 0
    else
      echo -e "\nNão há agendamentos ativos no sistema.\n"
      return 1
    fi
  fi

  echo -e "\nEste comando irá automatizar a execução do rebalanceamento da carteira $nmbot_sel_wallet para o usuário ${nmuser[$nmbs_current_index]}.\nDeseja agendar o rebalanceamento para qual horário?\nLembre-se de que o fuso horário do sistema pode ser diferente do seu fuso horário pessoal.\nO horário atual do sistema é: $(date +%H:%M:%S).\n"

  while true; do
    # Pergunta ao usuário o horário em que deseja executar o rebalanceamento.
    read -p "Digite o horário desejado no formato HH:mm (por exemplo, 21:05) > " -r
    [[ ! "$REPLY" =~ ^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$ ]] && echo "Horário inválido. Digite novamente." && continue
    break
  done

  nm_hour=${REPLY%:*}
  # para evitar bug do octal:
  nm_hour=${nm_hour#0}
  # para evitar bug de hora null se entrada for "0":
  nm_hour=${nm_hour:=0}
  nm_minute=${REPLY#*:}
  nm_minute=${nm_minute#0}

  nm_pw_set="0"
  read -p "OPCIONAL: Deseja realizar também o agendamento da sincronização de senha com o servidor? (s/n) > " -r
  do-nmbs-sncheck "$REPLY" && nm_pw_set="1"

  echo -e "\nRealizando agendamento da execução do NMBOT..."
  # Cria arquivo temporário para armazenamento dos agendamentos a serem instalados com o comando crontab.
  touch crontab.tmp

  # Verifica se já existem quaisquer agendamentos instalados para o usuário atual.
  crontabfile="/var/spool/cron/crontabs/$USER"
  crontabfileexists="0"
  sudo test -f "$crontabfile" && crontabfileexists="1"
  if [[ "$crontabfileexists" -eq "1" ]]; then
    # Exclui os agendamentos já existentes relativos à carteira que está sendo configurada, mantendo os demais..
    sudo sed /^#/d "$crontabfile" > crontab.tmp
    sed -i /^$/d crontab.tmp
    sed -i "/NMBOT${nmdir_number[$nmbs_current_index]}_HOME}\/${nmbot_run_file}/d" crontab.tmp
    sed -i "/NMBOT${nmdir_number[$nmbs_current_index]}_HOME}\/${nmbot_pw_file}/d" crontab.tmp
  fi

  # Cria os agendamentos conforme escolhido pelo usuário.
  # O rebalanceamento será agendado exatamente no horário escolhido, enquanto a sincronização de senha será
  #   agendada para um horário aleatório, distante pelo menos 2 horas do horário do rebalanceamento.

  [[ "$nm_pw_set" = "1" ]] && echo "$((10 + $RANDOM % 40)) $(( ( ( $nm_hour + 2 ) % 24 + $RANDOM % 21 ) % 24 )) * * * bash \${NMBOT${nmdir_number[$nmbs_current_index]}_HOME}/${nmbot_pw_file}" >> crontab.tmp
  echo "$nm_minute $nm_hour * * * bash \${NMBOT${nmdir_number[$nmbs_current_index]}_HOME}/${nmbot_run_file}" >> crontab.tmp
  echo "" >> crontab.tmp

  unset nmbot_pw_file nmbot_run_file crontabfile crontabfileexists

  # Instalar novos agendamentos e forçar início do serviço cron.
  crontab crontab.tmp 2> /dev/null || { echo -e "\nHouve um erro durante a instalação dos agendamentos no sistema.\nTente novamente com o comando 'nm-agendar' ou agende manualmente através do comando 'crontab -e'.\n"; rm crontab.tmp 2> /dev/null; return 1; }
  sudo service cron start

  # Fim da instalação dos agendamentos. Remover arquivos e variáveis temporárias para maior organização.
  echo -e "\nO rebalanceamento da carteira $nmbot_sel_wallet será executado diariamente às ${nm_hour}h${nm_minute}min (horário do servidor)."
  if [[ "$nm_pw_set" = "1" ]]; then
    echo "A sincronização de senha com o servidor do NMBOT foi agendada para horário aleatório."
  else
    [[ "$nmbot_sel_wallet" = "SPOT" ]] && nm_pw_command="nm-pw-spot" || nm_pw_command="nm-pw-fut"
    echo "A sincronização de senha não foi agendada. Execute-a manualmente pelo menos uma vez com o comando ${nm_pw_command}."
  fi
  echo -e "\nPara conferir os agendamentos existentes, use o comando 'nm-agendar' ou 'crontab -l'.\nPara excluir todos os agendamentos, use o comando 'nm-agendar' ou 'crontab -r'.\n"
  rm crontab.tmp 2> /dev/null
  unset nmbot_sel_wallet nm_hour nm_minute nm_pw_command
  return 0
}

# Função interativa para gerenciar backups de configurações e LOGs do robô
function nm-backup() {
  # nm_bakmode: 0 = restore from backup
  #		1 = save backup from 1 user
  #		2 = save backup from all users
  do-nmbot-list || { echo -e "\nVocê não possui instâncias do NMBOT instaladas.\nPara instalar, use o comando 'nm-instalar'.\nApós, se desejar restaurar as configurações a partir de um backup, use novamente o comando 'nm-backup'.\n" >&2; return 1; }

  echo -e "\nQual ação você gostaria de realizar?\n"
  select_options=("Restaurar configurações a partir de um backup")
  [[ "$NM_COUNT" -eq "1" ]] && select_options+=("Salvar backup das configurações do usuário") || select_options+=("Salvar backup das configurações de um usuário" "Salvar backup das configurações de todos os usuários")
  tnmbs-select
  nm_bakmode="$select_number"

  # variable set here for error checking: check whether backup directory exists
  nmbakd="${HOME}/backup-nmbot/"

  # SE FOR 1 -> SALVAR de UM USUÁRIO
  if [[ "$nm_bakmode" = "1" ]]; then
    tnmbs-sel-instance

    echo -e "\nEste comando realizará um backup das configurações e dos registros de atividade (LOGs) do NMBOT do usuário ${nmuser[$nmbs_current_index]}.\nA sua instância do NMBOT está instalada em ${nmpath[$nmbs_current_index]}\n"
    read -p "Deseja continuar? (s/n) > " -r
    do-nmbs-sncheck "$REPLY" || { echo -e "\nCancelado. Nenhuma alteração foi feita.\n"; return 1; }

    echo -e "Se desejar, digite um nome para o diretório de backup (contendo apenas letras, números e hífen).\nCaso contrário, deixe em branco e pressione Enter."
    while true; do
      read -p "Nome do backup: > " -r
      if [[ -z "$REPLY" ]]; then
        do-nmbot-backup 1 "$nmbs_current_index"
        break
      elif [[ ! "$REPLY" =~ ^[a-zA-Z0-9][-a-zA-Z0-9]+$ ]]; then
        echo "Nome inválido. Tente novamente."
        continue
      else
        [[ -d "${nmbakd}${REPLY}" ]] && { echo "Já existe um backup com este nome. Tente novamente."; continue; }
        nm_bk_tmp=~/nm_bk_tmp/
        mkdir "$nm_bk_tmp" 2> /dev/null
        mkdir "${nm_bk_tmp}${REPLY}" 2> /dev/null || { echo "Nome inválido. Tente novamente."; rm -rf "$nm_bk_tmp"; continue; }
        rm -rf "$nm_bk_tmp"
        do-nmbot-backup 1 "$nmbs_current_index" "$REPLY"
        break
      fi
    done

  # SE FOR 2 -> SALVAR backup de todos os usuários
  elif [[ "$nm_bakmode" = "2" ]]; then
    echo -e "\nEste comando realizará um backup das configurações e dos registros de atividade (LOGs) do NMBOT para os $NM_COUNT usuários instalados.\nOs backups serão salvos em diretórios com nomes aleatórios.\n"
    read -p "Deseja continuar? (s/n) > " -r
    do-nmbs-sncheck "$REPLY" || { echo -e "\nCancelado. Nenhuma alteração foi feita.\n"; return 1; }
    do-nmbot-backup 2

  # SE FOR 0 -> RESTAURAR para um usuário
  elif [[ "$nm_bakmode" = "0" ]]; then
    # check 1: is there a backup folder?
    [[ ! -d "$nmbakd" ]] && { echo -e "\nNão foi encontrado um diretório de backups do NMBOT (${nmbakd}).\nNenhuma alteração foi feita.\n"; return 1; }
    # check 2: is there at least one folder inside it?
    nmbak_opt=(${nmbakd}*/)
    [[ "${nmbak_opt[@]}" = "${nmbakd}*/" ]] && { echo -e "\nNão foi encontrado nenhum backup do NMBOT no diretório de backups (${nmbakd}).\nNenhuma alteração foi feita.\n"; return 1; }

    tnmbs-sel-instance
    echo -e "\nEste comando irá restaurar um backup das configurações do NMBOT para o usuário ${nmuser[$nmbs_current_index]}.\nA sua instância do NMBOT está instalada em ${nmpath[$nmbs_current_index]}\nSe houver LOGs do NMBOT no backup, eles não serão restaurados, permanecendo apenas na pasta de backups."

    # se houver apenas 1 pasta de backup disponível
    if [[ "${#nmbak_opt[@]}" = "1" ]]; then
      echo -e "\nA pasta de backup disponível é ${nmbak_opt[0]}."
      read -p "Deseja continuar? (s/n) > " -r
      do-nmbs-sncheck "$REPLY" || { echo -e "\nCancelado. Nenhuma alteração foi feita.\n"; return 1; }

      nmbak_files=(${nmbak_opt[0]}config/*.properties)
      [[ "${nmbak_files[@]}" = "${nmbak_opt[0]}config/*.properties" ]] && { echo -e "\nNão foram encontrados arquivos de backup do NMBOT no diretório apontado.\nNenhuma alteração foi feita.\n"; return 1; }
      do-nmbot-backup 0 "$nmbs_current_index" "${nmbak_opt[0]}"

    # se houver mais de uma pasta de backup disponível
    else
      echo -e "\nQual diretório contém o backup que você deseja restaurar?\n"
      PS3=$'\nDigite a opção correspondente: '
      select choice in "${nmbak_opt[@]/${nmbakd}}"; do
        for item in "${nmbak_opt[@]/${nmbakd}}"; do
          if [[ "$item" = "$choice" ]]; then
            escolha=$(( $REPLY - 1 ))
            break 2
          fi
        done
        echo "Opção inválida. Tente novamente."
      done
      unset choice item

      echo -e "\nA pasta de backup escolhida é ${nmbak_opt[$escolha]}."
      read -p "Deseja continuar? (s/n) > " -r
      do-nmbs-sncheck "$REPLY" || { echo -e "\nCancelado. Nenhuma alteração foi feita.\n"; return 1; }

      nmbak_files=(${nmbak_opt[$escolha]}config/*.properties)
      [[ "${nmbak_files[@]}" = "${nmbak_opt[$escolha]}config/*.properties" ]] && { echo -e "\nNão foram encontrados arquivos de backup do NMBOT no diretório apontado.\nNenhuma alteração foi feita.\n"; return 1; }
      do-nmbot-backup 0 "$nmbs_current_index" "${nmbak_opt[$escolha]}"
    fi
  fi

  echo -e "\nConcluído.\n"
  unset nm_bakmode selopt choice item
}

# Função para acessar os LOGs do NMBOT
function nm-registros() {
  do-nmbot-list || { echo -e "\nVocê não possui instâncias do NMBOT instaladas.\nPara instalar, use o comando nm-instalar.\n" >&2; return 1; }
  nmbs_current_index="$1"
  if [[ "$#" = "0" ]]; then
    tnmbs-sel-instance
  elif [[ ! -d "${nmpath[${1}]}" ]]; then return 1
  fi

  echo -e "\nVocê deseja consultar quais registros do NMBOT?\nRobô instalado em ${nmdir[$nmbs_current_index]}/ - usuário ${nmuser[$nmbs_current_index]}:\n"
  select_options=("Registro simplificado (frequentemente solicitado pelo suporte)" "Carteira SPOT - registro longo" "Carteira FUTUROS - registro longo" "Cancelar")
  tnmbs-select

  case $select_number in
    0) nm_tmpfile="${nmpath[$nmbs_current_index]}/log-user/user.properties.log" ;;
    1) nm_tmpfile="${nmpath[$nmbs_current_index]}/log/log4j-nm.log" ;;
    2) nm_tmpfile=("${nmpath[$nmbs_current_index]}"/log/futures*.log) ;;
    3) echo ""; return 1 ;;
  esac

  [[ ! -f "$nm_tmpfile" ]] && { echo -e "\nArquivo correspondente não encontrado.\nVerifique manualmente os diretórios ~/${nmdir[$nmbs_current_index]}/log/ e ~/${nmdir[$nmbs_current_index]}/log-user/\n"; unset nm_tmpfile; return 1; }

  if [[ "${#nm_tmpfile[@]}" -gt "1" ]]; then
    echo -e "\nQual arquivo você gostaria de exibir?"
    select logs in "${nm_tmpfile[@]/#${HOME}\/}"; do
      for item in "${nm_tmpfile[@]/#${HOME}\/}"; do
        if [[ "$item" = "$logs" ]]; then
          escolha=$(( $REPLY - 1 ))
          break 2
        fi
      done
    echo "Opção inválida. Tente novamente."
    done
    unset logs item
  fi
  escolha=${escolha:=0}

  echo -e "\nVocê irá visualizar o arquivo ${nm_tmpfile[$escolha]}.\nO conteúdo do arquivo será exibido em uma tela separada.\n\nPara rolar a tela, se necessário, use as setas do teclado e as teclas 'Page Up' e 'Page Down'.\nPara salvar prints da tela, use as teclas 'Command+Shift+3' (Mac) ou 'Windows+Print Screen' (Windows).\nPara sair do modo de visualização, pressione a tecla 'Q'.\n\nPressione Enter para continuar..."
  read

  less +G "${nm_tmpfile[$escolha]}"

  unset escolha nm_tmpfile
  return 0
}

# Função para atualização do NMBOT
function nm-atualizar() {
  # nm_update_mode:	0: download package from the last valid URL. keep package
  #			1: update download URL. keep package
  #			2: update download URL and installed binaries. keep package
  #			3: update installed binaries only (set onwards). discard package
  unset nm_update_mode
  do-nmbot-list

  # se não houver instâncias instaladas:
  if [[ "$?" = "1" ]]; then
    echo -e "\nVocê não possui instâncias do NMBOT instaladas.\nPara instalar, use o comando nm-instalar.\n" >&2

    nmbotfile="${HOME}/.nmbot.zip"

    # se houver pacote baixado no sistema: (mode=1)
    if [[ -f "$nmbotfile" ]]; then
      echo -e "Este comando fará o download do pacote de instalação do NMBOT a partir do endereço que você informar e armazenará este endereço caso ele seja válido.\nUma cópia deste pacote será mantida em seu sistema, para o caso de você precisar reinstalar ou instalar uma nova instância do NMBOT.\nPara prosseguir, obtenha o link ou URL (endereço para download) do NMBOT em sua VERSÃO PARA LINUX COM JAVA.\n"
      read -p "Deseja continuar? (s/n) > " -r
      do-nmbs-sncheck "$REPLY" || { echo -e "Cancelado. Nenhuma alteração foi feita.\n"; return 1; }
      read -p "Cole aqui o link para download do NMBOT > " -r
      nm_update_mode="1"
      nm_url="$REPLY" ;

    # se NÃO houver pacote baixado no sistema: (mode=0 ou 1)
    else
      echo -e "Arquivo de instalação do NMBOT não encontrado. Que ação você deseja realizar?\n"
      select_options=("Fazer download do NMBOT a partir do endereço já armazenado" "Fazer download do NMBOT a partir de um novo endereço")
      tnmbs-select

      case $select_number in
        0) echo -e "\nO download do pacote de instalação do NMBOT será iniciado a partir do último endereço válido utilizado.\nUma cópia deste pacote será mantida em seu sistema, para o caso de você precisar reinstalar ou instalar uma nova instância do NMBOT.\n"
           nm_update_mode="0"
           nm_url="$NM_LAST_URL" ;;
        1) echo -e "\nEste comando fará o download do pacote de instalação do NMBOT a partir do endereço que você informar e armazenará este endereço caso ele seja válido.\nUma cópia deste pacote será mantida em seu sistema, para o caso de você precisar reinstalar ou instalar uma nova instância do NMBOT.\nPara prosseguir, obtenha o link ou URL (endereço para download) do NMBOT em sua VERSÃO PARA LINUX COM JAVA.\n"
           read -p "Cole aqui o link para download do NMBOT > " -r
           nm_update_mode="1"
           nm_url="$REPLY" ;;
      esac
    fi

  # se houver instância(s) instalada(s): (mode=2 pacote linux+java. mode=3 se qualquer outro)
  else
    echo -e "\nEste comando faz a substituição do arquivo do NMBOT em todas as instâncias instaladas pela versão que você indicar para download.\nAlém disso, também atualiza e armazena o link de download do NMBOT caso ele seja válido.\nUma cópia do pacote de instalação é mantida em seu sistema, para o caso de você precisar reinstalar ou instalar uma nova instância do NMBOT.\nPara prosseguir, obtenha o link ou URL (endereço para download do NMBOT), preferencialmente em sua VERSÃO PARA LINUX COM JAVA.\n"
    read -p "Deseja continuar? (s/n) > " -r
    do-nmbs-sncheck "$REPLY" || { echo -e "Cancelado. Nenhuma alteração foi feita.\n"; return 1; }
    read -p "Cole aqui o link para download do NMBOT > " -r
    nm_update_mode="2"
    nm_url="$REPLY"
  fi

  # PASSO 1: download do pacote da URL informada ou armazenada
  wget -qc -nc --show-progress "${nm_url}" -O ~/bot-tmp.zip || {
    echo -e "\nOcorreu um erro durante o download do arquivo do robô e a atualização não pôde ser concluída.\nVerifique o endereço de download informado e tente novamente com o comando nm-atualizar.\n"
    rm -f ~/bot-tmp.zip 2> /dev/null
    return 1
  }

  echo -e "Conferindo o pacote de arquivos baixado..."
  mkdir ~/nmbtmp 2> /dev/null

  # PASSO 2: verificar se o pacote é um arquivo .zip válido
  unzip -qqo ~/bot-tmp.zip -d ~/nmbtmp || {
    echo -e "\nO arquivo baixado não pôde ser processado. Ele pode estar corrompido ou o endereço informado não se refere ao arquivo correto.\nVerifique o endereço de download informado e tente novamente com o comando nm-atualizar.\n"
    rm -f ~/bot-tmp.zip
    rm -rf ~/nmbtmp
    return 1
  }

  # PASSO 3: verificar se o pacote contém o arquivo nmbot.jar como esperado
  nmbot_newfile=$(find ~/nmbtmp -name "nmbot.jar" 2> /dev/null)
  [[ -f "$nmbot_newfile" ]] || {
    echo -e "\nO arquivo do NMBOT não foi encontrado no pacote de arquivos que foi baixado.\nVerifique o endereço de download informado e tente novamente com o comando nm-atualizar.\n" >&2
    rm -f ~/bot-tmp.zip
    rm -rf ~/nmbtmp
    return 1
  }

  # PASSO 4: verificar se o pacote contém o java
  java_check=$(find ~/nmbtmp/jre/bin -name java* 2> /dev/null)
  [[ -z "$java_check" ]] && {
    case $nm_update_mode in
      # CASO NÃO TENHA JAVA:
      # se o comando for para armazenar o pacote (com ou sem atualização de URL), cancelar
      [0-1]) echo -e "\nO pacote de instalação do NMBOT baixado não possui o pacote Java.\nPor isso, o endereço de download não será armazenado e o pacote será excluído.\nTente novamente com o endereço para o NMBOT em sua VERSÃO PARA LINUX COM JAVA.\n" >&2
             rm -f ~/bot-tmp.zip
             rm -rf ~/nmbtmp
             return 1 ;;
      # se o comando for para atualizar instâncias instaladas, atualizar mas descartar pacote e URL
      2)     echo -e "\nO pacote de instalação do NMBOT baixado não possui o pacote Java.\nEle poderá ser usado para atualização das instâncias atualmente instaladas, mas não será armazenado para futuras instalações.\n"
             nm_update_mode="3" ;;
    esac
  }

  # PASSO 5: verificar se o pacote contém scripts para windows
  windows_check=$(find ~/nmbtmp -name *.bat)
  [[ -n "$windows_check" ]] && {
    case $nm_update_mode in
      # CASO TENHAS SCRIPTS PARA WINDOWS:
      # se o comando for para armazenar o pacote (com ou sem atualização de URL), cancelar
      [0-1]) echo -e "\nO pacote de instalação do NMBOT baixado contém scripts para rodá-lo no sistema operacional Windows. Por isso, o endereço de download não será armazenado e o pacote será excluído.\nTente novamente com o endereço para o NMBOT em sua VERSÃO PARA LINUX COM JAVA.\n" >&2
             rm -f ~/bot-tmp.zip
             rm -rf ~/nmbtmp
             return 1 ;;
      # se o comando for para atualizar instâncias instaladas, atualizar mas descartar pacote e URL
      2)     echo -e "\nO pacote de instalação do NMBOT baixado contém scripts para rodá-lo no sistema operacional Windows. Ele poderá ser usado para atualização das instâncias atualmente instaladas, mas não será armazenado para futuras instalações.\n"
             nm_update_mode="3" ;;
      # caso o pacote não tenha java, já foi definido mode=3, portanto pacote já será descartado sendo ou não para windows. não precisa verificação aqui.
    esac
  }

  echo -e "\nO pacote de instalação/atualização do NMBOT foi conferido."
  read -p "Deseja prosseguir? (s/n) > " -r
  do-nmbs-sncheck "$REPLY" || {
    rm -f ~/bot-tmp.zip
    rm -rf ~/nmbtmp
    echo -e "\nCancelado. Nenhuma alteração foi feita.\nO arquivo baixado foi removido.\n"
    return 1
  }
  echo -en "\nAtualizando o NMBOT..."

  case $nm_update_mode in
    # apenas armazenar o pacote de instalação (mode=0)
    0)    mv ~/bot-tmp.zip ~/.nmbot.zip ;;

    # armazenar o pacote de instalação e a URL de download (mode=1)
    1)    sudo sed -i "/NM_LAST_URL/d" /etc/profile.d/nmbscript-variables.sh
          echo "export NM_LAST_URL=\"${nm_url}\"" | sudo tee -a /etc/profile.d/nmbscript-variables.sh > /dev/null
          . /etc/profile.d/nmbscript-variables.sh
          bakstr=$( do-nmbs-datestr )
          mv ~/.nmbot.zip ~/.nmbot-${bakstr}.zip.bak 2> /dev/null
          mv ~/bot-tmp.zip ~/.nmbot.zip ;;

    # atualizar NMBOT, armazenar o pacote de instalação e a URL de download (mode=2)
    2)    for a in "${nmpath[@]}"; do
            cp "$nmbot_newfile" "${a}/lib/nmbot.jar"
          done
          sudo sed -i "/NM_LAST_URL/d" /etc/profile.d/nmbscript-variables.sh
          echo "export NM_LAST_URL=\"${nm_url}\"" | sudo tee -a /etc/profile.d/nmbscript-variables.sh > /dev/null
          . /etc/profile.d/nmbscript-variables.sh
          bakstr=$( do-nmbs-datestr )
          mv ~/.nmbot.zip ~/.nmbot-${bakstr}.zip.bak > /dev/null
          mv ~/bot-tmp.zip ~/.nmbot.zip ;;

    # atualizar NMBOT apenas (mode=3)
    3)    for a in "${nmpath[@]}"; do
            cp "$nmbot_newfile" "${a}/lib/nmbot.jar"
          done
          rm -f ~/bot-tmp.zip ;;
  esac

  rm -rf ~/nmbtmp
  unset nm_url a bakstr nm_update_mode
  echo -e " concluído! Os arquivos foram atualizados com sucesso.\n"
}


#######
#####
##### Comandos interativos específicos do NMBScript:
##### > nms-ajuda
##### > nms-atualizar
##### > nms-info
##### > nms-remover
#####
#######

# Função de ajuda para uso do NMBScript
function nms-ajuda() {
  echo -e "\nNMBScript - Script de controle para o NMBOT.

Lista de comandos disponíveis.

Comandos para instalação e desinstalação do NMBOT:
 > nm-instalar		Instala uma instância do NMBOT. É possível instalar várias instâncias para rodarem em paralelo.
 > nm-desinstalar	Remove uma ou mais instâncias do NMBOT.\n			Opção de manter backup dos arquivos de configuração e registros de atividade.
 > nm-listar		Atualiza e exibe a lista das instâncias do NMBOT atualmente instaladas no sistema.

Comandos para configuração do NMBOT:
 > nm-configurar	Configurar os dados do NMBOT: usuário e senha, API da exchange, configurações da carteira, etc.\n			Você pode usar este comando para conferir as configurações do usuário ou carteira, sem alterá-las.
 > nm-agendar		Agendar as execuções automáticas do robô.
 > nm-backup		Salvar ou restaurar um backup das configurações do NMBOT.\n			Útil para alternar entre configurações de carteira pré-estabelecidas já armazenadas.
 > nm-registros		Acessar os LOGs (registros de atividade) do NMBOT.
 > nm-atualizar		Atualizar a versão do NMBOT.

Comandos para rodar o NMBOT manualmente:
 > nm-spot-run		Rodar o NMBOT no modo run para a carteira SPOT.
 > nm-forcerun-spot	Rodar o NMBOT no modo forcerun para a carteira SPOT.
 > nm-testar-spot	Rodar o NMBOT no modo teste para a carteira SPOT.
 > nm-pw-spot		Executar a sincronização de senha do NMBOT, carteira SPOT.
 > nm-panic-spot	Rodar o NMBOT no modo panic para a carteira SPOT.

 > nm-fut-run		Rodar o NMBOT no modo run para a carteira FUTUROS.
 > nm-forcerun-fut	Rodar o NMBOT no modo forcerun para a carteira FUTUROS.
 > nm-testar-fut	Rodar o NMBOT no modo teste para a carteira FUTUROS.
 > nm-pw-fut		Executar a sincronização de senha do NMBOT, carteira FUTUROS.
 > nm-panic-fut		Rodar o NMBOT no modo panic para a carteira FUTUROS.

Controles do NMBScript:
 > nms-ajuda		Apresenta esta tela de ajuda com a descrição detalhada de todos os comandos.
 > nms-atualizar	Atualizar a versão do NMBScript.
 > nms-info		Informações adicionais sobre o NMBScript.
 > nms-remover		Remover o NMBScript do sistema.\n			Esse comando MANTÉM as instâncias do NMBOT instaladas e em funcionamento.\n			Opção -f: remove também o arquivo do NMBScript.

 Versão atual do NMBScript:	$NMBSCRIPT_VERSION
 Versão mais recente do NMBOT: 	1.3\n
 Autor do script original: 	Victor H.S.\n"
}

# Função para atualização do NMBScript
function nms-atualizar() {
  echo -e "\nEste comando atualiza o NMBScript, substituindo-o pela versão mais atual.\nPara prosseguir, obtenha a URL (endereço para download do NMBScript).\n"
  read -p "Cole ou digite aqui a URL para download do NMBScript: " -r
  wget -qc -nc --show-progress "$REPLY" -O ~/nmbs-update.zip 2> /dev/null || {
    echo -e "\nOcorreu um erro durante o download do arquivo e a atualização não pôde ser concluída.\nVerifique o endereço de download informado e tente novamente com o comando nms-atualizar.\n"
    return 1
  }

  mkdir ~/nmbstmp 2> /dev/null
  unzip -qqo ~/nmbs-update.zip -d ~/nmbstmp || {
    echo -e "\nO arquivo baixado não pôde ser processado. Ele pode estar corrompido, ou o endereço informado não se refere ao arquivo correto.\nVerifique o endereço de download informado e tente novamente com o comando nms-atualizar.\n"
    rm -f ~/nmbs-update.zip
    rm -rf ~/nmbstmp
    return 1
  }

  if [[ ! -f ~/nmbstmp/nmbs-update ]]; then
    echo -e "\nArquivo de atualização do NMBScript não encontrado no pacote baixado.\nO arquivo baixado será apagado do sistema.\nVerifique o endereço de download informado e tente novamente com o comando nms-atualizar.\n"
    rm -f ~/nmbs-update.zip
    rm -rf ~/nmbstmp
    return 1
  else
    bakstr=$( do-nmbs-datestr )
    mv ~/.nmbscript ~/.nmbscript-${bakstr}.bak
    mv ~/nmbstmp/nmbs-update ~/.nmbscript
    chmod 544 ~/.nmbscript
    . ~/.nmbscript
  fi

  rm -f ~/nmbs-update.zip
  rm -rf ~/nmbstmp
  echo -e "\nScript de controle do NMBOT atualizado.\nUse o comando 'nms-ajuda' para mais detalhes.\n"
}

# Função para exibir informações gerais na tela
function nms-info() {
echo -e "\n	NMBScript - Script de instalação e configuração do NMBOT
\n	Este script foi desenvolvido para automatizar a instalação e a configuração do NMBOT em servidores rodando o Canonical Ubuntu Linux 18.04 LTS. O script foi amplamente testado no shell 'bash' versão 4.4.20, sendo provável que funcione em versões posteriores. Entretanto, para uso com outros tipos de shell ou com outras versões do 'bash', podem ser necessários ajustes no código. É recomendado que o sistema em que for utilizado não tenha outro uso além da execução do NMBOT, de forma que sugere-se a sua instalação em uma máquina virtual, possivelmente em ambiente de nuvem.
\n	Pressione ENTER para continuar..."
read
echo -e "	O presente script foi criado com o intuito único e exclusivo de ajudar os demais usuários e assinantes da plataforma NM a configurarem o robô para seu uso pessoal. O script é distribuído livremente para uso, estudo, cópia, modificação e redistribuição. Não é fornecido sob nenhuma licença específica, tampouco são exigidos créditos ou direitos de autoria. Da mesma forma, não é oferecido nenhum tipo de suporte por parte do seu autor. Salienta-se que não há nenhuma pretensão de uso comercial e que o autor não pode ser responsabilizado por eventual e hipotético uso comercial indevido por terceiros.\n	..."
read
echo -e "	O autor deste script não possui nenhum vínculo com os criadores do NMBOT, os quais não prestarão nenhum tipo de suporte para o seu uso. O script torna a instalação, a configuração e a execução do NMBOT mais amigáveis e interativas, mas tenha em mente que a equipe da plataforma NM não presta suporte para o uso do NMBOT no sistema operacional Linux. O autor também esclarece que não se deseja, com esta aplicação, alterar de qualquer maneira o funcionamento intrínseco do NMBOT, em especial com relação às condicionantes de acesso ao robô instituídas pela equipe responsável por ele. É sabido que a execução do NMBOT está sujeita à adesão a uma assinatura paga, e o autor deste script, além de usuário, é um admirador do projeto e recomenda que todos os interessados façam sua adesão pelo site oficial: investidordesucesso.com.br\n	..."
read
echo -e "	Em resumo, o script tem como objetivo facilitar a vida dos colegas do curso que desejem rodar o NMBOT, especialmente os que querem fazê-lo em máquinas virtuais na nuvem e que possuem reduzida experiência com o sistema operacional Linux e com o uso de linhas de comando. É oferecido com base na solidariedade e de boa fé para que os colegas assinantes da plataforma NM tenham uma melhor experiência com o uso do robô. Tudo o que o script faz pode também ser feito manualmente. Use-o por sua conta e risco, desde que saiba o que está fazendo.\n	..."
read
echo -e "	Todas as alterações introduzidas no sistema por este script podem ser removidas com o comando 'nms-remover'. Por motivos de transparência, quase todos os comandos do script trazem comentários explicativos no código fonte, tornando o seu conteúdo mais facilmente acessível para aqueles que desejarem estudá-lo antes da execução. O autor incentiva os usuários do script a se familiarizarem com suas funções e o seu código fonte. Para examinar o código deste script, execute o comando 'less .nmbscript' na linha de comando. Para editá-lo, use o editor de texto 'nano' com o comando 'nano .nmbscript'. Para fazer o download deste arquivo em outro sistema, acesse em seu navegador o endereço que digitou para baixá-lo no servidor (bit.ly/nmbscript...).\n	..."
read
echo -e "	Durante o processo de instalação e também no uso de determinadas funções, a depender da forma como você acessou o servidor, pode ser solicitada a sua senha de usuário pelo terminal. Neste caso, é a senha do usuário do sistema Linux que você configurou. Isso é necessário para ajustar algumas configurações do NMBOT que demandam privilégios de administrador do sistema. Se você acessou o servidor com um arquivo de chave privada, o que é recomendado, essa senha não será solicitada com a mesma frequência.
\n	Faça bom proveito!
\n	Versão do script: $NMBSCRIPT_VERSION
	Versão do NMBOT: 1.3
\n	Autor do script original: Victor H.S.\n"
}

# Função para remover o NMBScript
function nms-remover() {
  # opção -f: remove tudo, até o arquivo principal do script (.nmbscript)
  if [[ "$1" = "-f" ]]
  then echo -e "\nEste comando remove o NMBScript e desfaz as modificações feitas por ele no sistema.\nSe prosseguir com a remoção, as instâncias do NMBOT já instaladas permanecerão em funcionamento, mas deverão ser controladas manualmente.\nO NMBScript será completamente removido e, se desejar reinstalá-lo, deverá fazer o seu download novamente.\n"
  else echo -e "\nEste comando remove o NMBScript e desfaz as modificações feitas por ele no sistema.\nSe prosseguir com a remoção, as instâncias do NMBOT já instaladas permanecerão em funcionamento, mas deverão ser controladas manualmente.\nO NMBScript poderá ser reinstalado com o comando '. .nmbscript' se você desejar, e ele poderá comandar novamente o NMBOT já configurado.\n"
  fi

  read -p "Deseja continuar? (s/n) > " -r
  do-nmbs-sncheck "$REPLY" || { echo -e "\nCancelado. Nenhuma alteração foi feita.\n"; return 1; }
  read -p "Confirma? (s/n) > " -r
  do-nmbs-sncheck "$REPLY" || { echo -e "\nCancelado. Nenhuma alteração foi feita.\n"; return 1; }

  [[ -f ~/.bashrc.bak ]] && { rm ~/.bashrc; mv ~/.bashrc.bak ~/.bashrc; . ~/.bashrc; }
  [[ -f /etc/profile.d/nmbscript-variables.sh ]] && sudo rm -f /etc/profile.d/nmbscript-variables.sh
  [[ "$1" = "-f" ]] && [[ -f ~/.nmbscript ]] && rm -f ~/.nmbscript
  unset NMBSCRIPT_VERSION NM_LAST_URL
  echo -e "\nArquivos do Script removidos com sucesso. Se instalado, o NMBOT segue em funcionamento.\nReinicie a sessão do terminal para atualizar todas as configurações.\n"
  return 0
}

##### Aliases para comandos mais simples

alias nm-forcerun-spot="do-nmbot-command spot-forcerun.sh FORCERUN SPOT"
alias nm-spot-run="do-nmbot-command spot-run.sh RUN SPOT"
alias nm-testar-spot="do-nmbot-command spot-test.sh"
alias nm-pw-spot="do-nmbot-command spot-pwsync.sh"
alias nm-panic-spot="do-nmbot-command spot-panic.sh PANIC-SELL SPOT"

alias nm-forcerun-fut="do-nmbot-command futures-forcerun.sh FORCERUN FUTUROS"
alias nm-fut-run="do-nmbot-command futures-run.sh RUN FUTUROS"
alias nm-testar-fut="do-nmbot-command futures-test.sh"
alias nm-pw-fut="do-nmbot-command futures-pwsync.sh"
alias nm-panic-fut="do-nmbot-command futures-panic.sh PANIC-SELL FUTUROS"

##### Funções internas do NMBScript para execução de tarefas mais complexas.
##### Não usar manualmente, pois o uso incorreto pode comprometer o funcionamento do NMBOT.

# Função para executar a instalação de nova instância do robô
function do-nmbot-install() {

  # Escolhe o nome da pasta da nova instância do robô.
  do-nmbot-nextdir "$NM_COUNT"

  # Criar diretório para a nova instância do robô e descompactá-lo
  nmnewpath="${HOME}/nmbot${nmbot_nextdir_number}/"
  mkdir "$nmnewpath"
  unzip -qq "$2" -d "$nmnewpath"

  [[ ! -d "${HOME}/jre" ]] && [[ ! -d "${nmnewpath}jre" ]] && nmjavaalert=true
  [[ ! -d "${HOME}/jre" ]] && [[ -d "${nmnewpath}jre" ]] && mv "${nmnewpath}jre" "${HOME}/jre"
  rm -rf "${nmnewpath}jre/" 2> /dev/null

  # Atualizar scripts do novo robô para reconhecer a variável ambiente correspondente
  do-nmbot-update-scripts "$nmnewpath" "$nmbot_nextdir_number" 1

  eadboxusername="IS_EADBOX_USERNAME = ${1}"
  sed -i "/IS_EADBOX_USERNAME/c${eadboxusername}" ${nmnewpath}config/user.properties

  unset nmbot_nextdir_number
  # não exclui $nmnewpath para que possa ser usada como informação pela função interativa
  do-nmbot-list
  do-nmbot-variables
}

# Função para executar a desinstalação de uma ou mais instâncias do robô.
function do-nmbot-uninstall() {
  # Syntax: do-nmbot-uninstall <number>
  # number = número do índice da instância na array $nmpath[]
  # number = "-a": remover todas as instâncias do robô

  # Verifica se já existem quaisquer agendamentos instalados para o usuário atual.
  # Se existir, copia o conteúdo do arquivo crontab para um arquivo temporário, que será manipulado e instalado
  # Esta estratégia visa utilizar o comando crontab e seus "filtros", de forma a impedir manipulação inapropriada
  #  do arquivo crontab de forma direta
  crontabfile="/var/spool/cron/crontabs/${USER}"
  crontabfileexists=0
  sudo test -f "$crontabfile" && crontabfileexists=1
  if [[ "$crontabfileexists" = "1" ]]; then
    touch crontab.tmp
    # Copia o conteúdo do arquivo crontab para um arquivo temporário, excluindo comentários e linhas vazias
    sudo sed /^#/d "$crontabfile" > crontab.tmp
    sed -i /^$/d crontab.tmp
  fi

  if [[ "$1" = "-a" ]]; then
    for u in "${!nmpath[@]}"; do
      rm -rf "${nmpath[u]}"
    done
    [[ "$crontabfileexists" = "1" ]] && sed -i "/NMBOT/d" crontab.tmp
    unset u
  else
    rm -rf "${nmpath[$1]}"
    [[ "$crontabfileexists" = "1" ]] && sed -i "/NMBOT${nmdir_number[$1]}_HOME/d" crontab.tmp
  fi

  # this next command calls the do-nmbot-variables command, which will remove variables pointing to uninstalled instances
  do-nmbot-list

  # update the crontab file
  crontab crontab.tmp 2> /dev/null
  rm crontab.tmp 2> /dev/null
  unset crontabfile crontabfileexists
  return 0
}

# Função que executa os backups de configurações e LOGs
function do-nmbot-backup() {
  # syntax: do-nmbot-backup <0-2> <instance_number> <path_to_backup>
  # 0 = restore backup; requires 3rd argument: path from which to restore
  # 1 = save backup from the selected instance; requires 2nd argument; 3rd is optional
  # 2 = save backup from all instances; ignores other arguments
  # saving backups will save both configuration and log files
  # restoring backups, on the other hand, will only affect configuration files
  # configuration files are overwritten when restoring from a backup. if needed, a backup must be performed beforehand

  [[ -z "$1" ]] && return 1
  nmbakd="${HOME}/backup-nmbot"
  [[ ! -d "$nmbakd" ]] && mkdir "$nmbakd" 2> /dev/null

  # save backups from all users
  if [[ "$1" = "2" ]]; then
    for p in "${!nmpath[@]}"; do
      insbakd="${nmbakd}/${nmdir[p]}-$( do-nmbs-datestr )"
      mkdir "$insbakd" 2> /dev/null || { break; return 2; }
      cp -r "${nmpath[p]}/config/" "${insbakd}/config/" 2> /dev/null
      cp -r "${nmpath[p]}/log/" "${insbakd}/log/" 2> /dev/null
      cp -r "${nmpath[p]}/log-user/" "${insbakd}/log-user/" 2> /dev/null
    done
    return 0
  fi

  [[ -z "$2" ]] || [[ ! "$2" =~ ^[0-9]+$ ]] && return 1

  # save backup from selected user
  if [[ "$1" = "1" ]]; then
    [[ ! -d "${nmpath[${2}]}" ]] && return 1

    # save with random folder name
    if [[ -z "$3" ]]; then
      insbakd="${nmbakd}/${nmdir[${2}]}-$( do-nmbs-datestr )"
      mkdir "$insbakd" 2> /dev/null || return 2
    # save with chosen folder name. must have been checked beforehand for validation
    else
      insbakd="${nmbakd}/${3}"
      mkdir "$insbakd" 2> /dev/null || return 2
    fi
    cp -r "${nmpath[${2}]}/config/" "${insbakd}/config/" 2> /dev/null
    cp -r "${nmpath[${2}]}/log/" "${insbakd}/log/" 2> /dev/null
    cp -r "${nmpath[${2}]}/log-user/" "${insbakd}/log-user/" 2> /dev/null

  # restore from backup
  elif [[ "$1" = "0" ]]; then
    # error check: if either instance or path to restore from is null/invalid
    [[ -z "$2" ]] || [[ ! -d "$3" ]] && return 1

    # check for existing files is not done here
    nmbakfiles=(${3}/config/*.properties)
    for file in "${nmbakfiles[@]}"; do
      cp "$file" "${nmpath[${2}]}/config/" 2> /dev/null
    done

  fi
  unset nmbakd insbakd bakfiles file
  return 0
}

# Função interna para listar as instâncias do NMBOT atualmente instaladas
# Atualiza as variáveis array $nmpath, $nmdir e $nmuser
# Armazena o número de instâncias instaladas na variável $NM_COUNT -> /etc/environment
function do-nmbot-list() {

  unset nmpath nmdir nmuser nmdir_number nmdir_number_tmp

  nmpath=(~/nmbot*/)
  nmpath=("${nmpath[@]/%\/}")
  nmdir=()
  nmuser=()
  nmdir_number=()

  # loop: creates entries in the other arrays
  for x in "${!nmpath[@]}"; do
    # redundant error checking: make sure all elements in the array are directories
    if [[ ! -d "${nmpath[x]}" ]]; then
      # remove invalid element. move on to the next iteration. do not create entries on the other arrays
      unset 'nmpath[x]'
      continue
    fi

    # error check: if the directory of this iteration already HAS a number, create the corresponding nmdir entry and continue. otherwise, change directory name and the corresponding entry in the nmpath array before proceeding
    # whenever a directory is renamed, a command is called to update all scripts from that directory to the corresponding variable name, and all NMBOTX_HOME variables are updated to prevent further conflict
    # this specific section of the code will not be executed often. it is meant to be run only when the script is installed in a system whose NMBOT instance was installed manually beforehand
    nmdir_number_tmp=${nmpath[x]##*nmbot}

    # if nmdir_number_tmp is null, that is, folder has no number at all
    if [[ -z "$nmdir_number_tmp" ]]; then
      do-nmbot-nextdir "${#nmpath[@]}"
      nm_oldpath="${nmpath[x]}"
      nmpath[x]="${nmpath[x]}${nmbot_nextdir_number}"
      nmdir+=("nmbot${nmbot_nextdir_number}")
      nmdir_number+=("$nmbot_nextdir_number")
      mv "$nm_oldpath" "${nmpath[x]}"
      # update scripts to the corresponding variable. previously installed instances will keep using the same java binaries
      do-nmbot-update-scripts "${nmpath[x]}" "$nmbot_nextdir_number" 0
      unset nm_oldpath
    # if nmdir_number_tmp is numeric, that is, already numbered instance
    elif [[ "$nmdir_number_tmp" =~ ^[0-9]+$ ]]; then
      nmdir+=("nmbot${nmdir_number_tmp}")
      nmdir_number+=("$nmdir_number_tmp")
    # if nmdir_number_tmp is not numeric, that is, folder name is
    # nmbotsomething/, then ignore this folder and move on to the next
    else
      unset 'nmpath[x]'
      continue
    fi

    # create entry in the nmuser array with e-mail from the /nmbotX/config/user.properties file
    nmuser_tmp=$( grep USERNAME "${nmpath[x]}"/config/user.properties | tr -d '\r\n' )
    nmuser_tmp=${nmuser_tmp#* = }
    nmuser_tmp=${nmuser_tmp:="usuario@email.com"}
    nmuser+=("$nmuser_tmp")

  done
  unset nmuser_tmp nmdir_tmp nmdir_number_tmp x

  # re-creates the indices. error check and correction
  nmpath=(${nmpath[@]})
  nmdir=(${nmdir[@]})
  nmuser=(${nmuser[@]})
  nmdir_number=(${nmdir_number[@]})

  # se variável $NM_COUNT existir, apagar a linha
  cat /etc/environment | grep NM_COUNT > /dev/null
  [[ "$?" = "0" ]] && sudo sed -i "/^NM_COUNT/d" /etc/environment > /dev/null

  # escrever nova variável
  echo "NM_COUNT=${#nmpath[@]}" | sudo tee -a /etc/environment > /dev/null
  . /etc/environment
  export NM_COUNT

  # important to remove variables pointing to manually removed instances
  do-nmbot-variables

  [[ -z "${nmpath[*]}" ]] && return 1
  return 0
}

# Função para escolher o nome da pasta de uma nova instância do robô, quando instalada
function do-nmbot-nextdir() {
  # Syntax: do-nmbot-nextdir <COUNT>
  # O parâmetro count deve ser informado para ajustar a referência de contagem. Quando esta função for usada após a função do-nmbot-list, poderá ser usado $NM_COUNT como parâmetro. Ao ser chamada DENTRO daquela função, usar alguma outra forma de contagem separada
  # A função definirá a variável ${nmbot_nextdir_number}. Caso ocorra algum erro, a variável será nula e a função retornará o valor 1
  # Este passo é necessário pois o diretório de uma nova instância poderá não ter o mesmo numeral ordinal referente a uma nova instalação
  # Exemplo: há 3 instâncias: nmbot1/, nmbot2/ e nmbot3/. O usuário remove a instância nmbot2/, então NM_COUNT passa a ser 2.
  # A próxima instância a ser instalada será a TERCEIRA, mas sua pasta será nmbot2/ (e não nmbot3/, que já está ocupada)
  [[ -z "$1" ]] && return 1

  nmnumber_tmp=$(( $1 + 1 ))
  for (( nmbot_nextdir_number=1; nmbot_nextdir_number <= ${nmnumber_tmp}; nmbot_nextdir_number++ )); do
    if [[ ! -d "${HOME}/nmbot${nmbot_nextdir_number}" ]]; then
      break
      return 0
    fi
  done
}

# Função para atualizar os scripts do NMBOT para utilizarem a variável ambiente correta, de acordo com o diretório de
# instalação. Também atualiza a chamada para os binários do Java, de forma que múltiplas instâncias possam usar o mesmo
#  pacote localizado no diretório HOME (~/jre).
# Instalações prévias do NMBOT, realizadas antes da instalação do NMBScript, por padrão são mantidas com o pacote Java no mesmo
#  local (dentro do diretório do robô) e não tem essa parte do script atualizada. Esse comportamento padrão é definido na função
#  interativa, que submete o 3º desta argumento como "0".
# A função interativa também determina que novas instalações do NMBOT sempre tenham o pacote Java movido para diretório HOME e,
#  caso o pacote já exista, apenas o remove do diretório do robô e atualiza os scripts. 
function do-nmbot-update-scripts() {
  # Syntax: do-nmbot-update-scripts <path> <number> <java 0-1>
  # Example: do-nmbot-update-scrips /home/ubuntu/nmbot4/ 4 1
  # The directory number is redundant, but since it was most certainly calculated beforehand, passing it as an argument avoids unnecessary string processing

  for m in ${1}*.sh; do
    sed -i "s/NMBOT_HOME/NMBOT${2}_HOME/g" "$m"
    if [[ "$3" = "1" ]]; then

      tmp1=$( grep ^'./jre' "$m" )
      [[ -n "$tmp1" ]] && sed -i 's|./jre|~/jre|' "$m"

      tmp1=$( grep ^java "$m" )
      [[ -n "$tmp1" ]] && sed -i 's|java|~/jre/bin/java|' "$m"
#      unset tmp1
      unset tmp1
    fi
  done
}

# Função que executa a atualização das variáveis ambiente NMBOTx_HOME no arquivo /etc/environment
function do-nmbot-variables() {
  # previous do-nmbot-list call mandatory
  # remove all NMBOT home variables from /etc/environment
  sudo sed -i "/^NMBOT/d" /etc/environment > /dev/null

  # Iterate through installed instances creating variables for each of them
  for v in "${!nmdir[@]}"; do
    # nmvar -> NMBOTx_HOME
    nmvar="NMBOT${nmdir_number[v]}_HOME"
    echo "${nmvar}=${nmpath[v]}" | sudo tee -a /etc/environment > /dev/null
    eval "${nmvar}=${nmpath[v]}"
    export "$nmvar"
  done
  unset nmvar v
}

# Função de debug para listar as instâncias e variáveis que armazenam suas informações
function debug-nm() {
  for larr in "${!nmpath[@]}"; do
    echo "index=${larr} nmdir_number=${nmdir_number[larr]} nmdir=${nmdir[larr]} nmpath=${nmpath[larr]} nmuser=${nmuser[larr]}"
  done
  unset larr
}

# Gera uma string com a data em formato padrão, usada para backups
function do-nmbs-datestr() {
  echo "$( date +%Y%m%d-%H%M%S )"
}

# Função que verifica resposta para um prompt de confirmação s/n.
# Retorna 0 (sucesso) apenas para "s" ou "S"
function do-nmbs-sncheck() {
  # Checks for an "S" or "s" given as confirmation
  # Submit $REPLY as $1. Returns 0 if yes, 1 if other, 2 if null
  [[ -z "$1" ]] && return 2
  [[ "$1" =~ ^[Ss]$ ]] && return 0
  return 1
}

# Função de uso geral para execução de comandos do NMBOT.
# Faz seleção prévia da instância a ser executada, caso haja mais de uma instância instalada.
function do-nmbot-command() {
  # 1 = comando/arquivo
  # 2 = nome do comando
  # 3 = carteira
  # se $2 e $3 informados, prompt de confirmação

  do-nmbot-list || { echo -e "\nVocê não possui instâncias instaladas do NMBOT.\nPara instalar, use o comando nm-instalar.\n" >&2; return 1; }
  tnmbs-sel-instance

  if [[ -n "$3" ]]; then
    echo -e "\nComando ${2}, carteira ${3}, usuário ${nmuser[$nmbs_current_index]}"
    read -p "Confirma a execução? (s/n) > " -r
    do-nmbs-sncheck "$REPLY" || { echo -e "\nCancelado.\n"; return 1; }
  fi
  echo ""
  bash "${nmpath[$nmbs_current_index]}/${1}"
}

# Função para selecionar a instância de trabalho no terminal
# Define a variável $nmbs_current_index
function tnmbs-sel-instance() {
  if [[ ! "$NM_COUNT" -ge "1" ]]; then nmbs_current_index=0; return 1
  elif [[ "$NM_COUNT" -eq "1" ]]; then nmbs_current_index=0; return 0
  fi

  echo -e "\nSelecione a instância do NMBOT desejada.\n"
 
  select_options=()
  for i in "${!nmdir[@]}"; do
    select_options+=("${nmdir[i]} - usuário: ${nmuser[i]}")
  done
  tnmbs-select

  nmbs_current_index="$select_number"
  return 0
}

# Função para gerar listas de escolha no terminal.
function tnmbs-select() {
  # select_options ARRAY variable must be set before
  # returns select_number variable with number
  # and keeps select_choice with description
  # unsets select_options variable when done
  PS3=$'\nDigite a opção correspondente: '
  select select_choice in "${select_options[@]}"; do
    for select_item in "${select_options[@]}"; do
      if [[ "$select_item" = "$select_choice" ]]; then
        select_number=$(( $REPLY - 1 ))
        break 2
      fi
    done
    echo "Opção inválida. Tente novamente."
  done
  # keeps select_number and select_choice for quick reference
  # if select_options array needed, pass argument $1 = 1
  [[ ! "$1" = "1" ]] && unset select_options
  unset select_item
  return 0
}

# Sessão a ser lida na primeira vez em que o script é executado (instalação do NMBScript)
if [[ "$nmbscript_firsttime" = "1" ]]; then
  # Exibir informações sobre o NMBScript
  nms-info
  echo "Pressione 'ENTER' para iniciar a instalação, ou 'Ctrl + C' para cancelar..."
  read

  # Criação do arquivo com as variáveis NMBSCRIPT_VERSION, usada para identificar o script e sinalizar instalação prévia, e NM_LAST_URL, que armazena o endereço de download do NMBOT.
  touch ~/variables.tmp
  echo "export NMBSCRIPT_VERSION=\"${current_nmbscript_version}\"" > ~/variables.tmp
  echo "export NM_LAST_URL=\"${current_nmbot_url}\"" >> ~/variables.tmp
  chmod +x ~/variables.tmp
  sudo mv ~/variables.tmp /etc/profile.d/nmbscript-variables.sh
  . /etc/profile.d/nmbscript-variables.sh

  # Backup do arquivo de configurações do shell, que é editado para ler o NMBScript em todo início de sessão
  cp ~/.bashrc ~/.bashrc.bak
  echo -e "\n\n# Arquivo de inicialização do NMBScript. Será lido em todo início de sessão do shell.\n" >> ~/.bashrc
  echo -e "if [ -f ~/.nmbscript ]; then\n  chmod 544 ~/.nmbscript\n  . ~/.nmbscript && echo -e \"\\n * NMBScript v\${NMBSCRIPT_VERSION} carregado com sucesso.\\n\"\nfi\n" >> ~/.bashrc

  # Atualização do sistema
  echo -e "Algumas atualizações do sistema são recomendadas se esta máquina foi instalada recentemente.\nCaso o sistema já tenha sido atualizado anteriormente (comandos apt update e upgrade), você pode pular esta etapa."
  read -p "Deseja realizá-las agora? (s/n) > " -r
  [[ "$REPLY" =~ ^[Ss]$ ]] && {
    echo -e "\nAtualizando o sistema... esses passos podem demorar até 10 a 15 minutos.\n"
    sudo apt-get -qqy update
    sudo apt-get -qqy upgrade
  }

  # Instalação do pacote unzip
  echo -e "\nInstalando pacotes adicionais necessários..."
  sudo apt-get -qqy install unzip > /dev/null

  # Baixando a primeira cópia do NMBOT
  if [[ ! -f ~/.nmbot.zip ]]; then
    echo -e "Fazendo o download do NMBOT..."
    wget -qc -nc --show-progress "$NM_LAST_URL" -O ~/.nmbot.zip || echo " > Ocorreu um erro durante o download do NMBOT. Confira e atualize o link de download com o comando 'nm-atualizar'."
  else
    echo -e "Não será feito download do NMBOT pois o instalador já se encontra presente no sistema.\nPara atualizá-lo, use o comando 'nm-atualizar'."
  fi

  echo -e "\nInstalação do NMBScript concluída.\nRecomenda-se reiniciar a conexão com o servidor para aplicar todas as configurações.\n\nPara realizar a instalação do NMBOT, use o comando 'nm-instalar'.\nPara obter ajuda, use o comando 'nms-ajuda'.\n"
  unset nmbscript_firsttime
fi

unset current_nmbscript_version current_nmbot_url

